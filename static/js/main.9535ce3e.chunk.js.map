{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["AppStyles","createGlobalStyle","UrlForm","styled","div","CurrentColorIndicator","ColorPickerButton","button","props","active","css","ColorButtons","ColorPicker","useUrlState","color","setUrlState","style","backgroundColor","children","onClick","MapRegion","lat","lng","zoom","urlState","Map","center","Number","onViewportChanged","height","width","zIndex","TileLayer","attribution","url","SearchInput","input","SearchForm","name","asyncState","useAsync","controller","AbortController","signal","request","fetch","then","r","json","abort","characterSearch","placeholder","onChange","e","target","value","marginBottom","isLoading","hasSucceeded","result","results","map","character","key","padding","NavButton","GithubForkBanner","img","attrs","alt","src","Boolean","window","location","hostname","match","ReactDOM","render","href","className","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9535ce3e.chunk.js","sourcesContent":["import { Abortable } from 'abortable'\nimport React from 'react'\nimport { Map, TileLayer } from 'react-leaflet'\nimport styled, { css, createGlobalStyle } from 'styled-components'\nimport { hasSucceeded, isLoading, useAsync } from 'with-async'\nimport { useUrlState } from 'with-url-state'\nimport 'leaflet/dist/leaflet.css'\n\nconst AppStyles = createGlobalStyle`\n  body {\n    margin: 0;\n    padding: 0;\n    font-family: sans-serif;\n  }\n\n  body, #root {\n    align-items: center;\n    display: flex;\n    flex-direction: column;\n    flex: 1;\n    height: 100vh;\n    width: 100%;\n    padding: 0;\n    margin: 0;\n  }\n  \n  button {\n    font-size: 18px;\n    padding: 15px 25px;\n    margin: 0;\n  }\n  \n  .example-buttons {\n    background-color: black;\n    display: flex;\n    flex-direction: row;\n    width: 100%;\n  }\n  \n  .example-buttons button.active {\n}\n`\n\nconst UrlForm = styled.div`\n  align-items: center;\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n  justify-content: center;\n  width: 100%;\n`\n\nconst CurrentColorIndicator = styled.div`\n  align-items: center;\n  color: white;\n  display: flex;\n  flex-direction: column;\n  font-size: 26px;\n  height: 100px;\n  justify-content: center;\n  margin-bottom: 30px;\n  text-transform: capitalize;\n  width: 250px;\n`\n\nconst ColorPickerButton = styled.button<{ active: boolean }>`\n  background-color: white;\n  border: 3px solid purple;\n  border-radius: 4px;\n  color: purple;\n  font-size: 18px;\n  margin: 0;\n  padding: 15px 30px;\n\n  ${props =>\n    props.active &&\n    css`\n      background-color: purple;\n      color: white;\n    `}\n`\n\nconst ColorButtons = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n\n  > * {\n    margin-left: 10px;\n    margin-right: 10px;\n  }\n`\n\nexport const ColorPicker = () => {\n  const [{ color }, setUrlState] = useUrlState({ color: 'red' })\n  return (\n    <UrlForm style={{ backgroundColor: color }}>\n      <CurrentColorIndicator>\n        <div>{color}</div>\n      </CurrentColorIndicator>\n      <ColorButtons>\n        <ColorPickerButton\n          active={color === 'red'}\n          children=\"Red\"\n          onClick={() => setUrlState({ color: 'red' })}\n        />\n        <ColorPickerButton\n          active={color === 'green'}\n          children=\"Green\"\n          onClick={() => setUrlState({ color: 'green' })}\n        />\n        <ColorPickerButton\n          active={color === 'blue'}\n          children=\"Blue\"\n          onClick={() => setUrlState({ color: 'blue' })}\n        />\n      </ColorButtons>\n    </UrlForm>\n  )\n}\n\ntype MapState = { lat: string; lng: string; zoom: string }\nexport const MapRegion = () => {\n  const [urlState, setUrlState] = useUrlState<MapState>({\n    lat: '51.45999681055091',\n    lng: '-2.583847045898438',\n    zoom: '12',\n  })\n  return (\n    <Map\n      center={{ lat: Number(urlState.lat), lng: Number(urlState.lng) }}\n      onViewportChanged={({ center: [lat, lng], zoom }: any) =>\n        setUrlState({ lat, lng, zoom })\n      }\n      style={{\n        height: '100%',\n        width: '100%',\n        zIndex: 1,\n      }}\n      zoom={Number(urlState.zoom)}\n    >\n      <TileLayer\n        attribution={`&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors`}\n        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n      />\n    </Map>\n  )\n}\n\nconst SearchInput = styled.input`\n  margin-bottom: 15px;\n  margin-top: 25px;\n  padding: 15px 20px;\n`\n\ntype SearchResults = {\n  count: number\n  results: Array<{\n    height: string\n    name: string\n    url: string\n  }>\n}\n\nconst characterSearch = (name: string): Abortable<SearchResults> => {\n  let controller = new AbortController()\n  let signal = controller.signal\n  let request = fetch(`https://swapi.co/api/people/?search=${name}`, { signal })\n    .then(r => r.json())\n    .then(json => {\n      return json\n    }) as Abortable<SearchResults>\n  request.abort = () => {\n    controller.abort()\n  }\n  return request\n}\n\ntype FormState = { name: string }\nexport const SearchForm = () => {\n  const [{ name }, setUrlState] = useUrlState<FormState>({ name: 'Skywalker' })\n  const asyncState = useAsync(() => characterSearch(name), [name])\n  return (\n    <div>\n      <SearchInput\n        placeholder=\"Search\"\n        onChange={e => setUrlState({ name: e.target.value })}\n        style={{\n          marginBottom: 20,\n        }}\n        value={name}\n      />\n      <div>\n        {isLoading(asyncState) && <p>Loading</p>}\n        {hasSucceeded(asyncState) &&\n          asyncState.result != null &&\n          asyncState.result.results.map(character => (\n            <div\n              key={character.url}\n              style={{\n                padding: 10,\n              }}\n            >\n              {character.name}\n            </div>\n          ))}\n      </div>\n    </div>\n  )\n}\n\nconst NavButton = styled.button<{ active: boolean }>`\n  background-color: black;\n  border: none;\n  color: white;\n\n  ${props =>\n    props.active &&\n    css`\n      color: orange;\n    `}\n`\n\nconst GithubForkBanner = styled.img.attrs({\n  alt: 'Fork me on GitHub',\n  src: 'https://s3.amazonaws.com/github/ribbons/forkme_right_darkblue_121621.png',\n})`\n  position: absolute;\n  top: 0;\n  right: 0;\n  border: 0;\n  z-index: 2;\n`\n\ntype ExampleState = 'color' | 'form' | 'map'\nexport const App = () => {\n  const [{ active }, setUrlState] = useUrlState<{ active: ExampleState }>({\n    active: 'color',\n  })\n  return (\n    <>\n      <AppStyles />\n      <a href=\"https://github.com/Dean177/with-url-state\">\n        <GithubForkBanner />\n      </a>\n      <div className=\"example-buttons\">\n        <NavButton\n          active={active === 'color'}\n          onClick={() => setUrlState({ active: 'color' })}\n        >\n          Color Picker\n        </NavButton>\n        <NavButton\n          active={active === 'form'}\n          onClick={() => setUrlState({ active: 'form' })}\n        >\n          Search form\n        </NavButton>\n        <NavButton\n          active={active === 'map'}\n          onClick={() => setUrlState({ active: 'map' })}\n        >\n          Map\n        </NavButton>\n      </div>\n      {active === 'color' && <ColorPicker />}\n      {active === 'form' && <SearchForm />}\n      {active === 'map' && <MapRegion />}\n    </>\n  )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href,\n    )\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA',\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.',\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.')\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { App } from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}